name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      iac_tool:
        description: 'Infrastructure tool to use'
        required: true
        default: 'bicep'
        type: choice
        options:
          - bicep
          - terraform
          - both

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  IAC_TOOL: ${{ github.event.inputs.iac_tool || 'bicep' }}

jobs:
  # Code quality and security scanning
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python for Checkov
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        pip install checkov
        wget -O tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
        chmod +x tfsec
        sudo mv tfsec /usr/local/bin/
    
    - name: Run Checkov security scan
      run: |
        checkov --config-file .checkov.yml --output sarif --output-file-path checkov-results.sarif
      continue-on-error: true
    
    - name: Run tfsec security scan on Terraform
      if: env.IAC_TOOL == 'terraform' || env.IAC_TOOL == 'both'
      run: |
        tfsec infra/terraform --config-file .tfsec.yml --format sarif --out tfsec-results.sarif
      continue-on-error: true
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'
        category: 'infrastructure-security'
  validate-bicep:
    runs-on: ubuntu-latest
    needs: code-quality
    if: env.IAC_TOOL == 'bicep' || env.IAC_TOOL == 'both'
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Validate Bicep Template
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
        template: ./infra/bicep/main.bicep
        parameters: ./infra/bicep/parameters/${{ env.ENVIRONMENT }}.json sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
        deploymentMode: Validate
    
    - name: Run PSRule for Azure (Bicep)
      uses: microsoft/ps-rule@v2.9.0
      with:
        modules: 'PSRule.Rules.Azure'
        source: 'infra/bicep/'
        option: 'PSRule.options.yaml'

  validate-terraform:
    runs-on: ubuntu-latest
    needs: code-quality
    if: env.IAC_TOOL == 'terraform' || env.IAC_TOOL == 'both'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
    
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check -recursive
    
    - name: Initialize Terraform
      run: |
        cd infra/terraform
        terraform init -backend=false
    
    - name: Validate Terraform
      run: |
        cd infra/terraform
        terraform validate
    
    - name: Run TFLint
      run: |
        cd infra/terraform
        tflint --init
        tflint --config=../../.tflint.hcl
    
    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan \
          -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -var="resource_group_name=${{ secrets.RESOURCE_GROUP }}" \
          -out=tfplan
    
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    
    - name: Generate Infracost cost estimate
      run: |
        cd infra/terraform
        infracost breakdown --path . \
          --terraform-var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
          --terraform-var="sql_admin_password=dummy_password" \
          --terraform-var="resource_group_name=${{ secrets.RESOURCE_GROUP }}" \
          --format json --out-file infracost.json
        infracost output --path infracost.json --format table
      continue-on-error: true

  deploy-infrastructure:
    needs: [validate-bicep, validate-terraform]
    if: always() && (needs.validate-bicep.result == 'success' || needs.validate-bicep.result == 'skipped') && (needs.validate-terraform.result == 'success' || needs.validate-terraform.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy with Bicep
      if: env.IAC_TOOL == 'bicep'
      uses: azure/arm-deploy@v1
      id: deploy-bicep
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
        template: ./infra/bicep/main.bicep
        parameters: ./infra/bicep/parameters/${{ env.ENVIRONMENT }}.json sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
        deploymentMode: Incremental
        deploymentName: 'bidone-bicep-${{ github.run_number }}'
    
    - name: Setup Terraform for Deployment
      if: env.IAC_TOOL == 'terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        terraform_wrapper: false
    
    - name: Deploy with Terraform
      if: env.IAC_TOOL == 'terraform'
      id: deploy-terraform
      run: |
        cd infra/terraform
        
        # Initialize with backend configuration
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ env.ENVIRONMENT }}.terraform.tfstate" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        
        # Apply configuration
        terraform apply -auto-approve \
          -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -var="resource_group_name=${{ secrets.RESOURCE_GROUP }}"
        
        # Output values for downstream jobs
        echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "logic_app_name=$(terraform output -raw logic_app_name)" >> $GITHUB_OUTPUT
        echo "api_management_url=$(terraform output -raw api_management_url)" >> $GITHUB_OUTPUT
    
    - name: Deploy with Both Tools (Validation)
      if: env.IAC_TOOL == 'both'
      run: |
        echo "Validation mode: Both tools validated successfully"
        echo "In production, choose either Bicep or Terraform for deployment"
    
    - name: Output deployment results
      run: |
        echo "Logic App Name: ${{ steps.deploy.outputs.logicAppName }}"
        echo "Function App Name: ${{ steps.deploy.outputs.functionAppName }}"
        echo "API Management URL: ${{ steps.deploy.outputs.apiManagementGatewayUrl }}"
        echo "Service Bus Namespace: ${{ steps.deploy.outputs.serviceBusNamespace }}"
    
    - name: Set outputs for downstream jobs
      id: infra-outputs
      run: |
        echo "logic-app-name=${{ steps.deploy.outputs.logicAppName }}" >> $GITHUB_OUTPUT
        echo "function-app-name=${{ steps.deploy.outputs.functionAppName }}" >> $GITHUB_OUTPUT
        echo "api-management-url=${{ steps.deploy.outputs.apiManagementGatewayUrl }}" >> $GITHUB_OUTPUT

  configure-api-management:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Configure API Management
      run: |
        # Get API Management service name from infrastructure deployment
        APIM_NAME=$(az apim list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[0].name" -o tsv)
        
        # Deploy API Management configuration
        ./scripts/deploy-apim-config.sh \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --apim-name $APIM_NAME \
          --external-api-url "https://localhost:5001" \
          --internal-api-url "https://localhost:5002" \
          --environment ${{ github.event.inputs.environment || 'dev' }}
      
    - name: Output API Management URLs
      run: |
        APIM_NAME=$(az apim list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[0].name" -o tsv)
        APIM_URL=$(az apim show --resource-group ${{ secrets.RESOURCE_GROUP }} --name $APIM_NAME --query "gatewayUrl" -o tsv)
        echo "API Management Gateway: $APIM_URL"
        echo "External API Endpoint: $APIM_URL/external"
        echo "Internal API Endpoint: $APIM_URL/internal"

  test-infrastructure:
    needs: [deploy-infrastructure, configure-api-management]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Install jq for JSON processing
      run: sudo apt-get update && sudo apt-get install -y jq netcat-openbsd
    
    - name: Run comprehensive infrastructure tests
      run: |
        chmod +x infra/test-infrastructure.sh
        ./infra/test-infrastructure.sh \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --environment ${{ env.ENVIRONMENT }} \
          --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          --output infrastructure-test-results.txt \
          --verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-test-results-${{ env.ENVIRONMENT }}
        path: infrastructure-test-results.txt
    
    - name: Test specific service endpoints
      run: |
        # Test Function App health endpoint (if exists)
        FUNCTION_APPS=$(az functionapp list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[].defaultHostName" -o tsv)
        for app in $FUNCTION_APPS; do
          echo "Testing Function App: $app"
          curl -f "https://$app/api/health" || echo "Health check failed for $app"
        done
    
    - name: Validate security configuration
      run: |
        echo "Running additional security validation..."
        
        # Check Key Vault access policies
        KEY_VAULTS=$(az keyvault list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[].name" -o tsv)
        for kv in $KEY_VAULTS; do
          echo "Checking Key Vault: $kv"
          az keyvault show --name $kv --query "properties.enableSoftDelete" -o tsv
        done
        
        # Check SQL Server firewall rules
        SQL_SERVERS=$(az sql server list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[].name" -o tsv)
        for server in $SQL_SERVERS; do
          echo "Checking SQL Server firewall rules: $server"
          az sql server firewall-rule list --resource-group ${{ secrets.RESOURCE_GROUP }} --server $server --query "length([])" -o tsv
        done