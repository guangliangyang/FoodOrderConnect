name: Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'
      - 'scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: 'true'
        type: boolean
      coverage_threshold:
        description: 'Code coverage threshold (%)'
        required: false
        default: '80'
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'BidOne.sln'
  COVERAGE_THRESHOLD: ${{ github.event.inputs.coverage_threshold || '80' }}
  RUN_INTEGRATION_TESTS: ${{ github.event.inputs.run_integration_tests || 'true' }}

jobs:
  # Build and unit test job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for SonarCloud analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-restore \
          --verbosity minimal
    
    - name: Run unit tests with coverage
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --logger "console;verbosity=minimal" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --settings coverlet.runsettings \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
    
    - name: Install ReportGenerator tool
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    
    - name: Generate coverage reports
      run: |
        reportgenerator \
          "-reports:TestResults/**/coverage.opencover.xml" \
          "-targetdir:TestResults/coverage-report" \
          "-reporttypes:Html;Cobertura;JsonSummary;MarkdownSummaryGithub" \
          "-sourcedirs:src" \
          "-historydir:TestResults/coverage-history"
    
    - name: Add coverage comment to PR
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "TestResults/coverage-report/SummaryGithub.md" ]; then
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          cat TestResults/coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Check coverage threshold
      run: |
        if [ -f "TestResults/coverage-report/Summary.json" ]; then
          COVERAGE=$(jq -r '.summary.linecoverage' TestResults/coverage-report/Summary.json)
          echo "Current coverage: $COVERAGE%"
          echo "Required coverage: ${{ env.COVERAGE_THRESHOLD }}%"
          
          # Remove % sign and compare
          COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
          if (( $(echo "$COVERAGE_NUM < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold ${{ env.COVERAGE_THRESHOLD }}%"
          fi
        else
          echo "⚠️ Coverage report not found, skipping threshold check"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          TestResults/**/*.trx
          TestResults/coverage-report/
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: TestResults/coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration tests job (runs after unit tests)
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event.inputs.run_integration_tests == 'true' || (github.event.inputs.run_integration_tests == '' && github.ref == 'refs/heads/main')
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: IntegrationTest123!
          ACCEPT_EULA: Y
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P IntegrationTest123! -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-restore
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for SQL Server to be ready..."
        timeout 60s bash -c 'until nc -z localhost 1433; do sleep 1; done'
        
        echo "Waiting for Redis to be ready..."
        timeout 60s bash -c 'until nc -z localhost 6379; do sleep 1; done'
        
        echo "All services are ready!"
    
    - name: Run integration tests
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=BidOneIntegrationTest;User Id=sa;Password=IntegrationTest123!;TrustServerCertificate=true;"
        ConnectionStrings__Redis: "localhost:6379"
        ASPNETCORE_ENVIRONMENT: Testing
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --logger "console;verbosity=minimal" \
          --filter "Category=Integration" \
          --results-directory ./IntegrationTestResults
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: IntegrationTestResults/**/*.trx
        retention-days: 30

  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build solution for analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-restore
    
    - name: Run security code scan
      uses: security-code-scan/security-code-scan-action@main
      with:
        project-path: ${{ env.SOLUTION_PATH }}
    
    - name: Install dotnet security tools
      run: |
        dotnet tool install -g dotnet-outdated-tool
        dotnet tool install -g snyk-to-html
    
    - name: Check for outdated packages
      run: |
        dotnet outdated ${{ env.SOLUTION_PATH }} --output outdated-packages.json --format json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          outdated-packages.json
          security-scan-results.sarif
        retention-days: 30

  # Code quality analysis with SonarCloud (if configured)
  sonarcloud:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ vars.SONAR_PROJECT_KEY != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Java (required for SonarCloud)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install SonarCloud scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner
    
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: TestResults
    
    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin \
          /k:"${{ vars.SONAR_PROJECT_KEY }}" \
          /o:"${{ vars.SONAR_ORGANIZATION }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/coverage-report/OpenCover.xml" \
          /d:sonar.cs.vstest.reportsPaths="TestResults/**/*.trx"
        
        dotnet build ${{ env.SOLUTION_PATH }} --configuration Release
        
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Performance testing (optional)
  performance-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release
    
    - name: Install NBomber performance testing tool
      run: dotnet tool install -g NBomber.DotNetCli
    
    - name: Run basic performance tests
      run: |
        echo "Running basic performance validation..."
        # Add actual performance tests here when available
        echo "Performance tests would run here"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-results/
        retention-days: 30

  # Deployment readiness check
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Check deployment readiness
      run: |
        echo "Checking deployment readiness..."
        
        # Check if all critical jobs passed
        BUILD_STATUS="${{ needs.build-and-test.result }}"
        INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        
        echo "Build and Test: $BUILD_STATUS"
        echo "Integration Tests: $INTEGRATION_STATUS"
        echo "Security Scan: $SECURITY_STATUS"
        
        if [ "$BUILD_STATUS" != "success" ]; then
          echo "❌ Build and test failed - deployment blocked"
          exit 1
        fi
        
        if [ "$INTEGRATION_STATUS" == "failure" ]; then
          echo "❌ Integration tests failed - deployment blocked"
          exit 1
        fi
        
        if [ "$SECURITY_STATUS" != "success" ]; then
          echo "⚠️ Security scan failed - review required"
          # Don't fail the deployment for security issues in this example
          # exit 1
        fi
        
        echo "✅ All checks passed - ready for deployment"
    
    - name: Create deployment summary
      run: |
        echo "## Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Unit Tests | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || (needs.integration-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage Threshold:** ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
