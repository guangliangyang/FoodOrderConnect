// <auto-generated />
using System;
using BidOne.InternalSystemApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BidOne.InternalSystemApi.Migrations
{
    [DbContext(typeof(BidOneDbContext))]
    partial class BidOneDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.AuditLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("Timestamp");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.CustomerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "CUST-001",
                            Address = "789 Restaurant Row, Food District, FD 11111",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6920),
                            Email = "orders@bellas.com",
                            IsActive = true,
                            Name = "Bella's Italian Restaurant",
                            Phone = "+1-555-1001",
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6920)
                        },
                        new
                        {
                            Id = "CUST-002",
                            Address = "321 Culinary Circle, Chef City, CC 22222",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6920),
                            Email = "purchasing@gourmetkitchen.com",
                            IsActive = true,
                            Name = "The Gourmet Kitchen",
                            Phone = "+1-555-1002",
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6920)
                        });
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.InventoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86523423-1209-4e67-a89b-958898dd8a42"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(7030),
                            ProductId = "PROD-001",
                            QuantityOnHand = 500,
                            QuantityReserved = 0,
                            ReorderLevel = 50,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("edd95af7-5309-4259-8d7d-c5c8b38dfa4a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(7030),
                            ProductId = "PROD-002",
                            QuantityOnHand = 200,
                            QuantityReserved = 0,
                            ReorderLevel = 25,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Status");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventType");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderEvents");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.ProductEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Name");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "PROD-001",
                            Category = "Vegetables",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6950),
                            Description = "Fresh organic vine-ripened tomatoes",
                            IsActive = true,
                            Name = "Organic Tomatoes",
                            SupplierId = "SUPP-001",
                            Unit = "lb",
                            UnitPrice = 3.50m,
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6950)
                        },
                        new
                        {
                            Id = "PROD-002",
                            Category = "Meat",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6950),
                            Description = "85% lean ground beef, grass-fed",
                            IsActive = true,
                            Name = "Premium Ground Beef",
                            SupplierId = "SUPP-002",
                            Unit = "lb",
                            UnitPrice = 8.99m,
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6950)
                        });
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.SupplierEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApiEndpoint")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "SUPP-001",
                            Address = "123 Wholesale Ave, Food City, FC 12345",
                            ApiEndpoint = "https://api.freshfoods.com/v1",
                            ContactEmail = "orders@freshfoods.com",
                            ContactPhone = "+1-555-0101",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6820),
                            IsActive = true,
                            Name = "Fresh Foods Wholesale",
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6820)
                        },
                        new
                        {
                            Id = "SUPP-002",
                            Address = "456 Butcher Blvd, Meat Town, MT 67890",
                            ApiEndpoint = "https://api.qualitymeats.com/orders",
                            ContactEmail = "supply@qualitymeats.com",
                            ContactPhone = "+1-555-0102",
                            CreatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6820),
                            IsActive = true,
                            Name = "Quality Meats Ltd",
                            UpdatedAt = new DateTime(2025, 8, 17, 11, 41, 49, 922, DateTimeKind.Utc).AddTicks(6820)
                        });
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.InventoryEntity", b =>
                {
                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.ProductEntity", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("BidOne.InternalSystemApi.Data.Entities.InventoryEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderEntity", b =>
                {
                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.SupplierEntity", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderEventEntity", b =>
                {
                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.OrderEntity", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("BidOne.InternalSystemApi.Data.Entities.SupplierEntity", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.OrderEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.ProductEntity", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("BidOne.InternalSystemApi.Data.Entities.SupplierEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
